// Generated by wangdxh

package snmplib

import "github.com/soniah/gosnmp"

// https://blog.51cto.com/13769225/2121431 网络拓扑
// https://blog.51cto.com/13769225/2121928
type oidtablecolums struct {
	Oid        string
	Colums     int
	Structtype interface{}
}

//iftableType:           &oidtablecolums{".1.3.6.1.2.1.2.2.1.", 22, IfTable{}},

var mapnameoidtable map[string]*oidtablecolums = map[string]*oidtablecolums{

	"ifTable":            &oidtablecolums{".1.3.6.1.2.1.2.2.1.", 22, Iftable{}},
	"atTable":            &oidtablecolums{".1.3.6.1.2.1.3.1.1.", 3, Attable{}},
	"ipAddrTable":        &oidtablecolums{".1.3.6.1.2.1.4.20.1.", 5, Ipaddrtable{}},
	"ipRouteTable":       &oidtablecolums{".1.3.6.1.2.1.4.21.1.", 13, Iproutetable{}},
	"ipNetToMediaTable":  &oidtablecolums{".1.3.6.1.2.1.4.22.1.", 4, Ipnettomediatable{}},
	"tcpConnTable":       &oidtablecolums{".1.3.6.1.2.1.6.13.1.", 5, Tcpconntable{}},
	"udpTable":           &oidtablecolums{".1.3.6.1.2.1.7.5.1.", 2, Udptable{}},
	"egpNeighTable":      &oidtablecolums{".1.3.6.1.2.1.8.5.1.", 15, Egpneightable{}},
	"dot1dBasePortTable": &oidtablecolums{".1.3.6.1.2.1.17.1.4.1.", 5, Dot1dbaseporttable{}},
	"dot1dStpPortTable":  &oidtablecolums{".1.3.6.1.2.1.17.2.15.1.", 11, Dot1dstpporttable{}},
	"dot1dTpFdbTable":    &oidtablecolums{".1.3.6.1.2.1.17.4.3.1.", 3, Dot1dtpfdbtable{}},
	"dot1dTpPortTable":   &oidtablecolums{".1.3.6.1.2.1.17.4.4.1.", 5, Dot1dtpporttable{}},
	"dot1dStaticTable":   &oidtablecolums{".1.3.6.1.2.1.17.5.1.1.", 4, Dot1dstatictable{}},
	"hrStorageTable":     &oidtablecolums{".1.3.6.1.2.1.25.2.3.1.", 7, Hrstoragetable{}},
	"hrDeviceTable":      &oidtablecolums{".1.3.6.1.2.1.25.3.2.1.", 6, Hrdevicetable{}},
	"hrProcessorTable":   &oidtablecolums{".1.3.6.1.2.1.25.3.3.1.", 2, Hrprocessortable{}},
	"hrNetworkTable":     &oidtablecolums{".1.3.6.1.2.1.25.3.4.1.", 1, Hrnetworktable{}},
	"hrPrinterTable":     &oidtablecolums{".1.3.6.1.2.1.25.3.5.1.", 2, Hrprintertable{}},
	"hrDiskStorageTable": &oidtablecolums{".1.3.6.1.2.1.25.3.6.1.", 4, Hrdiskstoragetable{}},
	"hrPartitionTable":   &oidtablecolums{".1.3.6.1.2.1.25.3.7.1.", 5, Hrpartitiontable{}},
	"hrFSTable":          &oidtablecolums{".1.3.6.1.2.1.25.3.8.1.", 9, Hrfstable{}},
	"hrSWRunTable":       &oidtablecolums{".1.3.6.1.2.1.25.4.2.1.", 7, Hrswruntable{}},
	"hrSWRunPerfTable":   &oidtablecolums{".1.3.6.1.2.1.25.5.1.1.", 2, Hrswrunperftable{}},
	"hrSWInstalledTable": &oidtablecolums{".1.3.6.1.2.1.25.6.3.1.", 5, Hrswinstalledtable{}},
}

type Iftable struct {
	Ifindex           int    `snmp:"INTEGER"`
	Ifdescr           string `snmp:"DisplayString"`
	Iftype            int    `snmp:"INTEGER"`
	Ifmtu             int    `snmp:"INTEGER"`
	Ifspeed           int    `snmp:"Gauge"`
	Ifphysaddress     string `snmp:"PhysAddress"`
	Ifadminstatus     int    `snmp:"INTEGER"`
	Ifoperstatus      int    `snmp:"INTEGER"`
	Iflastchange      int    `snmp:"TimeTicks"`
	Ifinoctets        int    `snmp:"Counter"`
	Ifinucastpkts     int    `snmp:"Counter"`
	Ifinnucastpkts    int    `snmp:"Counter"`
	Ifindiscards      int    `snmp:"Counter"`
	Ifinerrors        int    `snmp:"Counter"`
	Ifinunknownprotos int    `snmp:"Counter"`
	Ifoutoctets       int    `snmp:"Counter"`
	Ifoutucastpkts    int    `snmp:"Counter"`
	Ifoutnucastpkts   int    `snmp:"Counter"`
	Ifoutdiscards     int    `snmp:"Counter"`
	Ifouterrors       int    `snmp:"Counter"`
	Ifoutqlen         int    `snmp:"Gauge"`
	Ifspecific        string `snmp:"String"`
}

func GetifTable(g *gosnmp.GoSNMP) (tablist []Iftable, err error) {
	ret, err := getInfo(g, "ifTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Iftable))
	}
	return
}

type Attable struct {
	Atifindex     int    `snmp:"INTEGER"`
	Atphysaddress string `snmp:"PhysAddress"`
	Atnetaddress  string `snmp:"NetworkAddress"`
}

func GetatTable(g *gosnmp.GoSNMP) (tablist []Attable, err error) {
	ret, err := getInfo(g, "atTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Attable))
	}
	return
}

type Ipaddrtable struct {
	Ipadentaddr         string `snmp:"IpAddress"`
	Ipadentifindex      int    `snmp:"INTEGER"`
	Ipadentnetmask      string `snmp:"IpAddress"`
	Ipadentbcastaddr    int    `snmp:"INTEGER"`
	Ipadentreasmmaxsize int    `snmp:"INTEGER"`
}

func GetipAddrTable(g *gosnmp.GoSNMP) (tablist []Ipaddrtable, err error) {
	ret, err := getInfo(g, "ipAddrTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Ipaddrtable))
	}
	return
}

type Iproutetable struct {
	Iproutedest    string `snmp:"IpAddress"`
	Iprouteifindex int    `snmp:"INTEGER"`
	Iproutemetric1 int    `snmp:"INTEGER"`
	Iproutemetric2 int    `snmp:"INTEGER"`
	Iproutemetric3 int    `snmp:"INTEGER"`
	Iproutemetric4 int    `snmp:"INTEGER"`
	Iproutenexthop string `snmp:"IpAddress"`
	Iproutetype    int    `snmp:"INTEGER"`
	Iprouteproto   int    `snmp:"INTEGER"`
	Iprouteage     int    `snmp:"INTEGER"`
	Iproutemask    string `snmp:"IpAddress"`
	Iproutemetric5 int    `snmp:"INTEGER"`
	Iprouteinfo    string `snmp:"String"`
}

func GetipRouteTable(g *gosnmp.GoSNMP) (tablist []Iproutetable, err error) {
	ret, err := getInfo(g, "ipRouteTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Iproutetable))
	}
	return
}

type Ipnettomediatable struct {
	Ipnettomediaifindex     int    `snmp:"INTEGER"`
	Ipnettomediaphysaddress string `snmp:"PhysAddress"`
	Ipnettomedianetaddress  string `snmp:"IpAddress"`
	Ipnettomediatype        int    `snmp:"INTEGER"`
}

func GetipNetToMediaTable(g *gosnmp.GoSNMP) (tablist []Ipnettomediatable, err error) {
	ret, err := getInfo(g, "ipNetToMediaTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Ipnettomediatable))
	}
	return
}

type Tcpconntable struct {
	Tcpconnstate        int    `snmp:"INTEGER"`
	Tcpconnlocaladdress string `snmp:"IpAddress"`
	Tcpconnlocalport    int    `snmp:"INTEGER"`
	Tcpconnremaddress   string `snmp:"IpAddress"`
	Tcpconnremport      int    `snmp:"INTEGER"`
}

func GettcpConnTable(g *gosnmp.GoSNMP) (tablist []Tcpconntable, err error) {
	ret, err := getInfo(g, "tcpConnTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Tcpconntable))
	}
	return
}

type Udptable struct {
	Udplocaladdress string `snmp:"IpAddress"`
	Udplocalport    int    `snmp:"INTEGER"`
}

func GetudpTable(g *gosnmp.GoSNMP) (tablist []Udptable, err error) {
	ret, err := getInfo(g, "udpTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Udptable))
	}
	return
}

type Egpneightable struct {
	Egpneighstate         int    `snmp:"INTEGER"`
	Egpneighaddr          string `snmp:"IpAddress"`
	Egpneighas            int    `snmp:"INTEGER"`
	Egpneighinmsgs        int    `snmp:"Counter"`
	Egpneighinerrs        int    `snmp:"Counter"`
	Egpneighoutmsgs       int    `snmp:"Counter"`
	Egpneighouterrs       int    `snmp:"Counter"`
	Egpneighinerrmsgs     int    `snmp:"Counter"`
	Egpneighouterrmsgs    int    `snmp:"Counter"`
	Egpneighstateups      int    `snmp:"Counter"`
	Egpneighstatedowns    int    `snmp:"Counter"`
	Egpneighintervalhello int    `snmp:"INTEGER"`
	Egpneighintervalpoll  int    `snmp:"INTEGER"`
	Egpneighmode          int    `snmp:"INTEGER"`
	Egpneigheventtrigger  int    `snmp:"INTEGER"`
}

func GetegpNeighTable(g *gosnmp.GoSNMP) (tablist []Egpneightable, err error) {
	ret, err := getInfo(g, "egpNeighTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Egpneightable))
	}
	return
}

type Dot1dbaseporttable struct {
	Dot1dbaseport                      int    `snmp:"INTEGER"`
	Dot1dbaseportifindex               int    `snmp:"InterfaceIndex"`
	Dot1dbaseportcircuit               string `snmp:"String"`
	Dot1dbaseportdelayexceededdiscards int    `snmp:"Counter32"`
	Dot1dbaseportmtuexceededdiscards   int    `snmp:"Counter32"`
}

func Getdot1dBasePortTable(g *gosnmp.GoSNMP) (tablist []Dot1dbaseporttable, err error) {
	ret, err := getInfo(g, "dot1dBasePortTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Dot1dbaseporttable))
	}
	return
}

type Dot1dstpporttable struct {
	Dot1dstpport                   int    `snmp:"INTEGER"`
	Dot1dstpportpriority           int    `snmp:"INTEGER"`
	Dot1dstpportstate              int    `snmp:"INTEGER"`
	Dot1dstpportenable             int    `snmp:"INTEGER"`
	Dot1dstpportpathcost           int    `snmp:"INTEGER"`
	Dot1dstpportdesignatedroot     string `snmp:"BridgeId"`
	Dot1dstpportdesignatedcost     int    `snmp:"INTEGER"`
	Dot1dstpportdesignatedbridge   string `snmp:"BridgeId"`
	Dot1dstpportdesignatedport     string `snmp:"String"`
	Dot1dstpportforwardtransitions int    `snmp:"Counter32"`
	Dot1dstpportpathcost32         int    `snmp:"INTEGER"`
}

func Getdot1dStpPortTable(g *gosnmp.GoSNMP) (tablist []Dot1dstpporttable, err error) {
	ret, err := getInfo(g, "dot1dStpPortTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Dot1dstpporttable))
	}
	return
}

type Dot1dtpfdbtable struct {
	Dot1dtpfdbaddress string `snmp:"MacAddress"`
	Dot1dtpfdbport    int    `snmp:"INTEGER"`
	Dot1dtpfdbstatus  int    `snmp:"INTEGER"`
}

func Getdot1dTpFdbTable(g *gosnmp.GoSNMP) (tablist []Dot1dtpfdbtable, err error) {
	ret, err := getInfo(g, "dot1dTpFdbTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Dot1dtpfdbtable))
	}
	return
}

type Dot1dtpporttable struct {
	Dot1dtpport           int `snmp:"INTEGER"`
	Dot1dtpportmaxinfo    int `snmp:"INTEGER"`
	Dot1dtpportinframes   int `snmp:"Counter32"`
	Dot1dtpportoutframes  int `snmp:"Counter32"`
	Dot1dtpportindiscards int `snmp:"Counter32"`
}

func Getdot1dTpPortTable(g *gosnmp.GoSNMP) (tablist []Dot1dtpporttable, err error) {
	ret, err := getInfo(g, "dot1dTpPortTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Dot1dtpporttable))
	}
	return
}

type Dot1dstatictable struct {
	Dot1dstaticaddress       string `snmp:"MacAddress"`
	Dot1dstaticreceiveport   int    `snmp:"INTEGER"`
	Dot1dstaticallowedtogoto string `snmp:"String"`
	Dot1dstaticstatus        int    `snmp:"INTEGER"`
}

func Getdot1dStaticTable(g *gosnmp.GoSNMP) (tablist []Dot1dstatictable, err error) {
	ret, err := getInfo(g, "dot1dStaticTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Dot1dstatictable))
	}
	return
}

type Hrstoragetable struct {
	Hrstorageindex              int    `snmp:"INTEGER"`
	Hrstoragetype               string `snmp:"AutonomousType"`
	Hrstoragedescr              string `snmp:"DisplayString"`
	Hrstorageallocationunits    int    `snmp:"INTEGER"`
	Hrstoragesize               int    `snmp:"INTEGER"`
	Hrstorageused               int    `snmp:"INTEGER"`
	Hrstorageallocationfailures int    `snmp:"Counter32"`
}

func GethrStorageTable(g *gosnmp.GoSNMP) (tablist []Hrstoragetable, err error) {
	ret, err := getInfo(g, "hrStorageTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Hrstoragetable))
	}
	return
}

type Hrdevicetable struct {
	Hrdeviceindex  int    `snmp:"INTEGER"`
	Hrdevicetype   string `snmp:"AutonomousType"`
	Hrdevicedescr  string `snmp:"DisplayString"`
	Hrdeviceid     string `snmp:"ProductID"`
	Hrdevicestatus int    `snmp:"INTEGER"`
	Hrdeviceerrors int    `snmp:"Counter32"`
}

func GethrDeviceTable(g *gosnmp.GoSNMP) (tablist []Hrdevicetable, err error) {
	ret, err := getInfo(g, "hrDeviceTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Hrdevicetable))
	}
	return
}

type Hrprocessortable struct {
	Hrprocessorfrwid string `snmp:"ProductID"`
	Hrprocessorload  int    `snmp:"INTEGER"`
}

func GethrProcessorTable(g *gosnmp.GoSNMP) (tablist []Hrprocessortable, err error) {
	ret, err := getInfo(g, "hrProcessorTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Hrprocessortable))
	}
	return
}

type Hrnetworktable struct {
	Hrnetworkifindex int `snmp:"InterfaceIndexOrZero"`
}

func GethrNetworkTable(g *gosnmp.GoSNMP) (tablist []Hrnetworktable, err error) {
	ret, err := getInfo(g, "hrNetworkTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Hrnetworktable))
	}
	return
}

type Hrprintertable struct {
	Hrprinterstatus             int    `snmp:"INTEGER"`
	Hrprinterdetectederrorstate string `snmp:"String"`
}

func GethrPrinterTable(g *gosnmp.GoSNMP) (tablist []Hrprintertable, err error) {
	ret, err := getInfo(g, "hrPrinterTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Hrprintertable))
	}
	return
}

type Hrdiskstoragetable struct {
	Hrdiskstorageaccess    int `snmp:"INTEGER"`
	Hrdiskstoragemedia     int `snmp:"INTEGER"`
	Hrdiskstorageremoveble int `snmp:"TruthValue"`
	Hrdiskstoragecapacity  int `snmp:"KBytes"`
}

func GethrDiskStorageTable(g *gosnmp.GoSNMP) (tablist []Hrdiskstoragetable, err error) {
	ret, err := getInfo(g, "hrDiskStorageTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Hrdiskstoragetable))
	}
	return
}

type Hrpartitiontable struct {
	Hrpartitionindex   int    `snmp:"INTEGER"`
	Hrpartitionlabel   string `snmp:"InternationalDisplayString"`
	Hrpartitionid      string `snmp:"String"`
	Hrpartitionsize    int    `snmp:"KBytes"`
	Hrpartitionfsindex int    `snmp:"INTEGER"`
}

func GethrPartitionTable(g *gosnmp.GoSNMP) (tablist []Hrpartitiontable, err error) {
	ret, err := getInfo(g, "hrPartitionTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Hrpartitiontable))
	}
	return
}

type Hrfstable struct {
	Hrfsindex                 int    `snmp:"INTEGER"`
	Hrfsmountpoint            string `snmp:"InternationalDisplayString"`
	Hrfsremotemountpoint      string `snmp:"InternationalDisplayString"`
	Hrfstype                  string `snmp:"AutonomousType"`
	Hrfsaccess                int    `snmp:"INTEGER"`
	Hrfsbootable              int    `snmp:"TruthValue"`
	Hrfsstorageindex          int    `snmp:"INTEGER"`
	Hrfslastfullbackupdate    string `snmp:"DateAndTime"`
	Hrfslastpartialbackupdate string `snmp:"DateAndTime"`
}

func GethrFSTable(g *gosnmp.GoSNMP) (tablist []Hrfstable, err error) {
	ret, err := getInfo(g, "hrFSTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Hrfstable))
	}
	return
}

type Hrswruntable struct {
	Hrswrunindex      int    `snmp:"INTEGER"`
	Hrswrunname       string `snmp:"InternationalDisplayString"`
	Hrswrunid         string `snmp:"ProductID"`
	Hrswrunpath       string `snmp:"InternationalDisplayString"`
	Hrswrunparameters string `snmp:"InternationalDisplayString"`
	Hrswruntype       int    `snmp:"INTEGER"`
	Hrswrunstatus     int    `snmp:"INTEGER"`
}

func GethrSWRunTable(g *gosnmp.GoSNMP) (tablist []Hrswruntable, err error) {
	ret, err := getInfo(g, "hrSWRunTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Hrswruntable))
	}
	return
}

type Hrswrunperftable struct {
	Hrswrunperfcpu int `snmp:"INTEGER"`
	Hrswrunperfmem int `snmp:"KBytes"`
}

func GethrSWRunPerfTable(g *gosnmp.GoSNMP) (tablist []Hrswrunperftable, err error) {
	ret, err := getInfo(g, "hrSWRunPerfTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Hrswrunperftable))
	}
	return
}

type Hrswinstalledtable struct {
	Hrswinstalledindex int    `snmp:"INTEGER"`
	Hrswinstalledname  string `snmp:"InternationalDisplayString"`
	Hrswinstalledid    string `snmp:"ProductID"`
	Hrswinstalledtype  int    `snmp:"INTEGER"`
	Hrswinstalleddate  string `snmp:"DateAndTime"`
}

func GethrSWInstalledTable(g *gosnmp.GoSNMP) (tablist []Hrswinstalledtable, err error) {
	ret, err := getInfo(g, "hrSWInstalledTable")
	if err != nil {
		return
	}
	for _, val := range ret {
		tablist = append(tablist, val.(Hrswinstalledtable))
	}
	return
}

var mapnameoid map[string]string = map[string]string{
	//sysservices:  ".1.3.6.1.2.1.1.7.0", // 0110 第二层和三层

	"sysDescr":                        ".1.3.6.1.2.1.1.1.0",
	"sysObjectID":                     ".1.3.6.1.2.1.1.2.0",
	"sysUpTime":                       ".1.3.6.1.2.1.1.3.0",
	"sysContact":                      ".1.3.6.1.2.1.1.4.0",
	"sysName":                         ".1.3.6.1.2.1.1.5.0",
	"sysLocation":                     ".1.3.6.1.2.1.1.6.0",
	"sysServices":                     ".1.3.6.1.2.1.1.7.0",
	"ifNumber":                        ".1.3.6.1.2.1.2.1.0",
	"ipForwarding":                    ".1.3.6.1.2.1.4.1.0",
	"ipDefaultTTL":                    ".1.3.6.1.2.1.4.2.0",
	"ipInReceives":                    ".1.3.6.1.2.1.4.3.0",
	"ipInHdrErrors":                   ".1.3.6.1.2.1.4.4.0",
	"ipInAddrErrors":                  ".1.3.6.1.2.1.4.5.0",
	"ipForwDatagrams":                 ".1.3.6.1.2.1.4.6.0",
	"ipInUnknownProtos":               ".1.3.6.1.2.1.4.7.0",
	"ipInDiscards":                    ".1.3.6.1.2.1.4.8.0",
	"ipInDelivers":                    ".1.3.6.1.2.1.4.9.0",
	"ipOutRequests":                   ".1.3.6.1.2.1.4.10.0",
	"ipOutDiscards":                   ".1.3.6.1.2.1.4.11.0",
	"ipOutNoRoutes":                   ".1.3.6.1.2.1.4.12.0",
	"ipReasmTimeout":                  ".1.3.6.1.2.1.4.13.0",
	"ipReasmReqds":                    ".1.3.6.1.2.1.4.14.0",
	"ipReasmOKs":                      ".1.3.6.1.2.1.4.15.0",
	"ipReasmFails":                    ".1.3.6.1.2.1.4.16.0",
	"ipFragOKs":                       ".1.3.6.1.2.1.4.17.0",
	"ipFragFails":                     ".1.3.6.1.2.1.4.18.0",
	"ipFragCreates":                   ".1.3.6.1.2.1.4.19.0",
	"ipRoutingDiscards":               ".1.3.6.1.2.1.4.23.0",
	"icmpInMsgs":                      ".1.3.6.1.2.1.5.1.0",
	"icmpInErrors":                    ".1.3.6.1.2.1.5.2.0",
	"icmpInDestUnreachs":              ".1.3.6.1.2.1.5.3.0",
	"icmpInTimeExcds":                 ".1.3.6.1.2.1.5.4.0",
	"icmpInParmProbs":                 ".1.3.6.1.2.1.5.5.0",
	"icmpInSrcQuenchs":                ".1.3.6.1.2.1.5.6.0",
	"icmpInRedirects":                 ".1.3.6.1.2.1.5.7.0",
	"icmpInEchos":                     ".1.3.6.1.2.1.5.8.0",
	"icmpInEchoReps":                  ".1.3.6.1.2.1.5.9.0",
	"icmpInTimestamps":                ".1.3.6.1.2.1.5.10.0",
	"icmpInTimestampReps":             ".1.3.6.1.2.1.5.11.0",
	"icmpInAddrMasks":                 ".1.3.6.1.2.1.5.12.0",
	"icmpInAddrMaskReps":              ".1.3.6.1.2.1.5.13.0",
	"icmpOutMsgs":                     ".1.3.6.1.2.1.5.14.0",
	"icmpOutErrors":                   ".1.3.6.1.2.1.5.15.0",
	"icmpOutDestUnreachs":             ".1.3.6.1.2.1.5.16.0",
	"icmpOutTimeExcds":                ".1.3.6.1.2.1.5.17.0",
	"icmpOutParmProbs":                ".1.3.6.1.2.1.5.18.0",
	"icmpOutSrcQuenchs":               ".1.3.6.1.2.1.5.19.0",
	"icmpOutRedirects":                ".1.3.6.1.2.1.5.20.0",
	"icmpOutEchos":                    ".1.3.6.1.2.1.5.21.0",
	"icmpOutEchoReps":                 ".1.3.6.1.2.1.5.22.0",
	"icmpOutTimestamps":               ".1.3.6.1.2.1.5.23.0",
	"icmpOutTimestampReps":            ".1.3.6.1.2.1.5.24.0",
	"icmpOutAddrMasks":                ".1.3.6.1.2.1.5.25.0",
	"icmpOutAddrMaskReps":             ".1.3.6.1.2.1.5.26.0",
	"tcpRtoAlgorithm":                 ".1.3.6.1.2.1.6.1.0",
	"tcpRtoMin":                       ".1.3.6.1.2.1.6.2.0",
	"tcpRtoMax":                       ".1.3.6.1.2.1.6.3.0",
	"tcpMaxConn":                      ".1.3.6.1.2.1.6.4.0",
	"tcpActiveOpens":                  ".1.3.6.1.2.1.6.5.0",
	"tcpPassiveOpens":                 ".1.3.6.1.2.1.6.6.0",
	"tcpAttemptFails":                 ".1.3.6.1.2.1.6.7.0",
	"tcpEstabResets":                  ".1.3.6.1.2.1.6.8.0",
	"tcpCurrEstab":                    ".1.3.6.1.2.1.6.9.0",
	"tcpInSegs":                       ".1.3.6.1.2.1.6.10.0",
	"tcpOutSegs":                      ".1.3.6.1.2.1.6.11.0",
	"tcpRetransSegs":                  ".1.3.6.1.2.1.6.12.0",
	"tcpInErrs":                       ".1.3.6.1.2.1.6.14.0",
	"tcpOutRsts":                      ".1.3.6.1.2.1.6.15.0",
	"udpInDatagrams":                  ".1.3.6.1.2.1.7.1.0",
	"udpNoPorts":                      ".1.3.6.1.2.1.7.2.0",
	"udpInErrors":                     ".1.3.6.1.2.1.7.3.0",
	"udpOutDatagrams":                 ".1.3.6.1.2.1.7.4.0",
	"egpInMsgs":                       ".1.3.6.1.2.1.8.1.0",
	"egpInErrors":                     ".1.3.6.1.2.1.8.2.0",
	"egpOutMsgs":                      ".1.3.6.1.2.1.8.3.0",
	"egpOutErrors":                    ".1.3.6.1.2.1.8.4.0",
	"egpAs":                           ".1.3.6.1.2.1.8.6.0",
	"snmpInPkts":                      ".1.3.6.1.2.1.11.1.0",
	"snmpOutPkts":                     ".1.3.6.1.2.1.11.2.0",
	"snmpInBadVersions":               ".1.3.6.1.2.1.11.3.0",
	"snmpInBadCommunityNames":         ".1.3.6.1.2.1.11.4.0",
	"snmpInBadCommunityUses":          ".1.3.6.1.2.1.11.5.0",
	"snmpInASNParseErrs":              ".1.3.6.1.2.1.11.6.0",
	"snmpInTooBigs":                   ".1.3.6.1.2.1.11.8.0",
	"snmpInNoSuchNames":               ".1.3.6.1.2.1.11.9.0",
	"snmpInBadValues":                 ".1.3.6.1.2.1.11.10.0",
	"snmpInReadOnlys":                 ".1.3.6.1.2.1.11.11.0",
	"snmpInGenErrs":                   ".1.3.6.1.2.1.11.12.0",
	"snmpInTotalReqVars":              ".1.3.6.1.2.1.11.13.0",
	"snmpInTotalSetVars":              ".1.3.6.1.2.1.11.14.0",
	"snmpInGetRequests":               ".1.3.6.1.2.1.11.15.0",
	"snmpInGetNexts":                  ".1.3.6.1.2.1.11.16.0",
	"snmpInSetRequests":               ".1.3.6.1.2.1.11.17.0",
	"snmpInGetResponses":              ".1.3.6.1.2.1.11.18.0",
	"snmpInTraps":                     ".1.3.6.1.2.1.11.19.0",
	"snmpOutTooBigs":                  ".1.3.6.1.2.1.11.20.0",
	"snmpOutNoSuchNames":              ".1.3.6.1.2.1.11.21.0",
	"snmpOutBadValues":                ".1.3.6.1.2.1.11.22.0",
	"snmpOutGenErrs":                  ".1.3.6.1.2.1.11.24.0",
	"snmpOutGetRequests":              ".1.3.6.1.2.1.11.25.0",
	"snmpOutGetNexts":                 ".1.3.6.1.2.1.11.26.0",
	"snmpOutSetRequests":              ".1.3.6.1.2.1.11.27.0",
	"snmpOutGetResponses":             ".1.3.6.1.2.1.11.28.0",
	"snmpOutTraps":                    ".1.3.6.1.2.1.11.29.0",
	"snmpEnableAuthenTraps":           ".1.3.6.1.2.1.11.30.0",
	"dot1dBaseBridgeAddress":          ".1.3.6.1.2.1.17.1.1.0",
	"dot1dBaseNumPorts":               ".1.3.6.1.2.1.17.1.2.0",
	"dot1dBaseType":                   ".1.3.6.1.2.1.17.1.3.0",
	"dot1dStpProtocolSpecification":   ".1.3.6.1.2.1.17.2.1.0",
	"dot1dStpPriority":                ".1.3.6.1.2.1.17.2.2.0",
	"dot1dStpTimeSinceTopologyChange": ".1.3.6.1.2.1.17.2.3.0",
	"dot1dStpTopChanges":              ".1.3.6.1.2.1.17.2.4.0",
	"dot1dStpDesignatedRoot":          ".1.3.6.1.2.1.17.2.5.0",
	"dot1dStpRootCost":                ".1.3.6.1.2.1.17.2.6.0",
	"dot1dStpRootPort":                ".1.3.6.1.2.1.17.2.7.0",
	"dot1dStpMaxAge":                  ".1.3.6.1.2.1.17.2.8.0",
	"dot1dStpHelloTime":               ".1.3.6.1.2.1.17.2.9.0",
	"dot1dStpHoldTime":                ".1.3.6.1.2.1.17.2.10.0",
	"dot1dStpForwardDelay":            ".1.3.6.1.2.1.17.2.11.0",
	"dot1dStpBridgeMaxAge":            ".1.3.6.1.2.1.17.2.12.0",
	"dot1dStpBridgeHelloTime":         ".1.3.6.1.2.1.17.2.13.0",
	"dot1dStpBridgeForwardDelay":      ".1.3.6.1.2.1.17.2.14.0",
	"dot1dTpLearnedEntryDiscards":     ".1.3.6.1.2.1.17.4.1.0",
	"dot1dTpAgingTime":                ".1.3.6.1.2.1.17.4.2.0",
	"hrSystemUptime":                  ".1.3.6.1.2.1.25.1.1.0",
	"hrSystemDate":                    ".1.3.6.1.2.1.25.1.2.0",
	"hrSystemInitialLoadDevice":       ".1.3.6.1.2.1.25.1.3.0",
	"hrSystemInitialLoadParameters":   ".1.3.6.1.2.1.25.1.4.0",
	"hrSystemNumUsers":                ".1.3.6.1.2.1.25.1.5.0",
	"hrSystemProcesses":               ".1.3.6.1.2.1.25.1.6.0",
	"hrSystemMaxProcesses":            ".1.3.6.1.2.1.25.1.7.0",
	"hrMemorySize":                    ".1.3.6.1.2.1.25.2.2.0",
	"hrSWOSIndex":                     ".1.3.6.1.2.1.25.4.1.0",
	"hrSWInstalledLastChange":         ".1.3.6.1.2.1.25.6.1.0",
	"hrSWInstalledLastUpdateTime":     ".1.3.6.1.2.1.25.6.2.0",
}

func GetsysDescr(g *gosnmp.GoSNMP) (string, error) {
	ret, err := getitemvalue(g, "sysDescr")
	if err == nil {
		return ret.(string), nil
	}
	return "", err
}

func GetsysObjectID(g *gosnmp.GoSNMP) (string, error) {
	ret, err := getitemvalue(g, "sysObjectID")
	if err == nil {
		return ret.(string), nil
	}
	return "", err
}

func GetsysUpTime(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "sysUpTime")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsysContact(g *gosnmp.GoSNMP) (string, error) {
	ret, err := getitemvalue(g, "sysContact")
	if err == nil {
		return ret.(string), nil
	}
	return "", err
}

func GetsysName(g *gosnmp.GoSNMP) (string, error) {
	ret, err := getitemvalue(g, "sysName")
	if err == nil {
		return ret.(string), nil
	}
	return "", err
}

func GetsysLocation(g *gosnmp.GoSNMP) (string, error) {
	ret, err := getitemvalue(g, "sysLocation")
	if err == nil {
		return ret.(string), nil
	}
	return "", err
}

func GetsysServices(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "sysServices")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetifNumber(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ifNumber")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipForwarding(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipForwarding")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipDefaultTTL(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipDefaultTTL")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipInReceives(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipInReceives")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipInHdrErrors(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipInHdrErrors")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipInAddrErrors(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipInAddrErrors")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipForwDatagrams(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipForwDatagrams")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipInUnknownProtos(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipInUnknownProtos")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipInDiscards(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipInDiscards")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipInDelivers(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipInDelivers")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipOutRequests(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipOutRequests")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipOutDiscards(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipOutDiscards")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipOutNoRoutes(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipOutNoRoutes")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipReasmTimeout(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipReasmTimeout")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipReasmReqds(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipReasmReqds")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipReasmOKs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipReasmOKs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipReasmFails(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipReasmFails")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipFragOKs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipFragOKs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipFragFails(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipFragFails")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipFragCreates(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipFragCreates")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetipRoutingDiscards(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "ipRoutingDiscards")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInMsgs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInMsgs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInErrors(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInErrors")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInDestUnreachs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInDestUnreachs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInTimeExcds(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInTimeExcds")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInParmProbs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInParmProbs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInSrcQuenchs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInSrcQuenchs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInRedirects(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInRedirects")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInEchos(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInEchos")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInEchoReps(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInEchoReps")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInTimestamps(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInTimestamps")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInTimestampReps(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInTimestampReps")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInAddrMasks(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInAddrMasks")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpInAddrMaskReps(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpInAddrMaskReps")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutMsgs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutMsgs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutErrors(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutErrors")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutDestUnreachs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutDestUnreachs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutTimeExcds(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutTimeExcds")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutParmProbs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutParmProbs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutSrcQuenchs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutSrcQuenchs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutRedirects(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutRedirects")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutEchos(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutEchos")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutEchoReps(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutEchoReps")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutTimestamps(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutTimestamps")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutTimestampReps(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutTimestampReps")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutAddrMasks(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutAddrMasks")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GeticmpOutAddrMaskReps(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "icmpOutAddrMaskReps")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpRtoAlgorithm(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpRtoAlgorithm")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpRtoMin(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpRtoMin")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpRtoMax(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpRtoMax")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpMaxConn(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpMaxConn")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpActiveOpens(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpActiveOpens")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpPassiveOpens(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpPassiveOpens")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpAttemptFails(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpAttemptFails")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpEstabResets(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpEstabResets")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpCurrEstab(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpCurrEstab")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpInSegs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpInSegs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpOutSegs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpOutSegs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpRetransSegs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpRetransSegs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpInErrs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpInErrs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GettcpOutRsts(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "tcpOutRsts")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetudpInDatagrams(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "udpInDatagrams")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetudpNoPorts(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "udpNoPorts")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetudpInErrors(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "udpInErrors")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetudpOutDatagrams(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "udpOutDatagrams")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetegpInMsgs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "egpInMsgs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetegpInErrors(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "egpInErrors")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetegpOutMsgs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "egpOutMsgs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetegpOutErrors(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "egpOutErrors")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetegpAs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "egpAs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInPkts(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInPkts")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpOutPkts(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpOutPkts")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInBadVersions(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInBadVersions")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInBadCommunityNames(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInBadCommunityNames")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInBadCommunityUses(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInBadCommunityUses")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInASNParseErrs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInASNParseErrs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInTooBigs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInTooBigs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInNoSuchNames(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInNoSuchNames")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInBadValues(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInBadValues")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInReadOnlys(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInReadOnlys")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInGenErrs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInGenErrs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInTotalReqVars(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInTotalReqVars")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInTotalSetVars(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInTotalSetVars")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInGetRequests(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInGetRequests")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInGetNexts(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInGetNexts")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInSetRequests(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInSetRequests")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInGetResponses(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInGetResponses")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpInTraps(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpInTraps")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpOutTooBigs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpOutTooBigs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpOutNoSuchNames(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpOutNoSuchNames")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpOutBadValues(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpOutBadValues")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpOutGenErrs(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpOutGenErrs")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpOutGetRequests(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpOutGetRequests")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpOutGetNexts(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpOutGetNexts")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpOutSetRequests(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpOutSetRequests")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpOutGetResponses(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpOutGetResponses")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpOutTraps(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpOutTraps")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GetsnmpEnableAuthenTraps(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "snmpEnableAuthenTraps")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dBaseBridgeAddress(g *gosnmp.GoSNMP) (string, error) {
	ret, err := getitemvalue(g, "dot1dBaseBridgeAddress")
	if err == nil {
		return ret.(string), nil
	}
	return "", err
}

func Getdot1dBaseNumPorts(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dBaseNumPorts")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dBaseType(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dBaseType")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpProtocolSpecification(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpProtocolSpecification")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpPriority(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpPriority")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpTimeSinceTopologyChange(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpTimeSinceTopologyChange")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpTopChanges(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpTopChanges")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpDesignatedRoot(g *gosnmp.GoSNMP) (string, error) {
	ret, err := getitemvalue(g, "dot1dStpDesignatedRoot")
	if err == nil {
		return ret.(string), nil
	}
	return "", err
}

func Getdot1dStpRootCost(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpRootCost")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpRootPort(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpRootPort")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpMaxAge(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpMaxAge")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpHelloTime(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpHelloTime")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpHoldTime(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpHoldTime")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpForwardDelay(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpForwardDelay")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpBridgeMaxAge(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpBridgeMaxAge")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpBridgeHelloTime(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpBridgeHelloTime")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dStpBridgeForwardDelay(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dStpBridgeForwardDelay")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dTpLearnedEntryDiscards(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dTpLearnedEntryDiscards")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func Getdot1dTpAgingTime(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "dot1dTpAgingTime")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GethrSystemUptime(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "hrSystemUptime")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GethrSystemDate(g *gosnmp.GoSNMP) (string, error) {
	ret, err := getitemvalue(g, "hrSystemDate")
	if err == nil {
		return ret.(string), nil
	}
	return "", err
}

func GethrSystemInitialLoadDevice(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "hrSystemInitialLoadDevice")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GethrSystemInitialLoadParameters(g *gosnmp.GoSNMP) (string, error) {
	ret, err := getitemvalue(g, "hrSystemInitialLoadParameters")
	if err == nil {
		return ret.(string), nil
	}
	return "", err
}

func GethrSystemNumUsers(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "hrSystemNumUsers")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GethrSystemProcesses(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "hrSystemProcesses")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GethrSystemMaxProcesses(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "hrSystemMaxProcesses")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GethrMemorySize(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "hrMemorySize")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GethrSWOSIndex(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "hrSWOSIndex")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GethrSWInstalledLastChange(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "hrSWInstalledLastChange")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}

func GethrSWInstalledLastUpdateTime(g *gosnmp.GoSNMP) (int, error) {
	ret, err := getitemvalue(g, "hrSWInstalledLastUpdateTime")
	if err == nil {
		return ret.(int), nil
	}
	return 0, err
}
